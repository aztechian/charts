# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/mendhak/http-https-echo
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  hostname: ""
  pathType: ImplementationSpecific
  tls:
    enabled: false
    secretName: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  extraHosts:
    []
    # - host: chart-example.local
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  extraTls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Use Prometheus metrics to gather information from the http-echo server.
metrics:
  enabled: false
  serviceMonitor:
    # -- Should a ServiceMonitor be created. The prometheus CRDs must be present on the cluster for this to work.
    enabled: true
    additionalLabels: {}
  # -- The path to expose the metrics on for scraping, default is /metrics
  path:
  # -- Partition the metrics by path
  withPath: false
  # -- Partition the metrics by method
  withMethod: true
  # -- Partition the metrics by status code
  withStatus: true
  # -- The type of metrics to expose, can be "summary" or "histogram"
  metricType: summary

nodeSelector: {}

tolerations: []

affinity: {}

# -- Use the value of this header as the JWT token to decode and return in the response.
jwtHeader:
# -- Disable ExpressJS request logs in the container stdout output.
disableRequestLogs: false
# -- Don't log requests to this path.
logIgnorePath:
# -- Turn off the newline at the end of the log output.
logWithoutNewline: false
# -- Disable the JSON output in the response
echoBackToClient: true
# -- Return the values of all environment variables in the response to the client.
includeEnv: false
# -- Enable CORS headers in response to all requests.
cors:
  # -- The origin to allow. Use * to allow all. Without this value no other CORS values will be used.
  origin:
  # -- The methods to allow. Use * to allow all. Be sure to set `origin` to a specific value if you use this setting.
  methods:
  # -- The headers to allow. Use * to allow all. Be sure to set `origin` to a specific value if you use this setting.
  headers:
  # -- Allow credentials in the response. Be sure to set `origin` to a specific value if you use this setting.
  credentials:
# -- Return mTLS certificate information from the request.
mtls: false
# -- Preserve the case of headers in the response.
preserveHeaderCase: false

# -- The HTTP response content that will is forcably returned to the client.
overrideResponse: ""

# -- Enable TLS termination on the pod. You would normally only use this if you are not using an Ingress. If you have an existing certificate/key in a secret, you can reference it here.
tls:
  # -- Use an existing secret for the certificate and key content
  secret:
    reference: ""
    # -- The data in the secret that contains the certificate. Include the full chain here if desired.
    cert: tls.crt
    # -- The data in the secret that contains the private key.
    privateKey: tls.key
  # -- The certificate/full chain content to be used for TLS termination.
  cert: ""
  # -- The private key content to be used for TLS termination.
  key: ""
